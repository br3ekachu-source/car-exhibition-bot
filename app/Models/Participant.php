<?php

namespace App\Models;

use App\Console\Commands\TelegramPollingCommand;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class Participant extends Model
{
    use HasFactory;

// app/Models/Participant.php

    protected $fillable = [
        'telegram_id',
        'name',
        'telegram_username',
        'phone',
        'car_model',
        'license_plate',
        'participation_days',
        'current_step',
        'status', // –ù–æ–≤–æ–µ –ø–æ–ª–µ
        'moderator_comment' // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    ];

    protected $casts = [
        'participation_days' => 'string',
        'status' => 'string',
    ];

    // –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–∫–∏
    public const STATUSES = [
        'pending' => '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        'approved' => '–û–¥–æ–±—Ä–µ–Ω–æ',
        'rejected' => '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    ];

    public function carPhotos()
    {
        return $this->hasMany(CarPhoto::class);
    }

    // app/Models/Participant.php

    public function notifyStatusUpdate()
    {
        $message = match($this->status) {
            'approved' => "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ IDDC, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç 20-21 —Å–µ–Ω—Ç—è–±—Ä—è –Ω–∞ –ò–≥–æ—Ä–∞ –î—Ä–∞–π–≤ –û–î–û–ë–†–ï–ù–ê! –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
            'rejected' => "‚ùå –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É–¥–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑—Ä–∏—Ç–µ–ª—è",
            default => ""
        };

        if ($this->moderator_comment !== null && $this->moderator_comment !== '') {
            $message .= "\n\n–ü—Ä–∏—á–∏–Ω–∞: " . $this->moderator_comment;
        }

        $filename = match($this->status) {
            'approved' => 'approved.png',
            'rejected' => 'denied.png',
            default => ''
        };

        if (!empty($message)) {
            $this->sendImageMessage($this->telegram_id, $message, $filename);
        }
    }

    private function sendImageMessage($chatId, $text, $imageName, $replyMarkup = null)
    {
        $imagePath = storage_path('app/public/' . $imageName);
        
        if (!file_exists($imagePath)) {
            return $this->sendMessage($chatId, "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        try {
            $data = [
                'chat_id' => $chatId,
                'caption' => $text,
                'parse_mode' => 'HTML'
            ];

            if ($replyMarkup) {
                $data['reply_markup'] = $replyMarkup;
            }

            $response = Http::attach(
                'photo',
                file_get_contents($imagePath),
                $imageName
            )->post("https://api.telegram.org/bot".env('TELEGRAM_BOT_TOKEN')."/sendPhoto", $data);
            
            return $response;
        } catch (\Exception $e) {
            Log::error('Failed to send photo', ['error' => $e->getMessage()]);
            return $this->sendMessage($chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        }
    }
}